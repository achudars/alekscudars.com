"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_tsparticles_shape-image_browser_ImageDrawer_js"],{

/***/ "./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: function() { return /* binding */ ByteStream; }\n/* harmony export */ });\nclass ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRzcGFydGljbGVzL3NoYXBlLWltYWdlL2Jyb3dzZXIvR2lmVXRpbHMvQnl0ZVN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0JBQW9CO0FBQzVDLG1DQUFtQyxzQkFBc0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxnQ0FBZ0M7QUFDOUU7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9zaGFwZS1pbWFnZS9icm93c2VyL0dpZlV0aWxzL0J5dGVTdHJlYW0uanM/ZjE0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQnl0ZVN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnl0ZXMpO1xuICAgIH1cbiAgICBnZXRTdHJpbmcoY291bnQpIHtcbiAgICAgICAgY29uc3Qgc2xpY2UgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgY291bnQpO1xuICAgICAgICB0aGlzLnBvcyArPSBzbGljZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBzbGljZS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgU3RyaW5nLmZyb21DaGFyQ29kZShjdXJyKSwgXCJcIik7XG4gICAgfVxuICAgIG5leHRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdO1xuICAgIH1cbiAgICBuZXh0VHdvQnl0ZXMoKSB7XG4gICAgICAgIGNvbnN0IGluY3JlbWVudCA9IDIsIHByZXZpb3VzID0gMSwgc2hpZnQgPSA4O1xuICAgICAgICB0aGlzLnBvcyArPSBpbmNyZW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MgLSBpbmNyZW1lbnRdICsgKHRoaXMuZGF0YVt0aGlzLnBvcyAtIHByZXZpb3VzXSA8PCBzaGlmdCk7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3MoKSB7XG4gICAgICAgIGxldCBibG9ja1N0cmluZyA9IFwiXCIsIHNpemUgPSAwO1xuICAgICAgICBjb25zdCBtaW5Db3VudCA9IDAsIGVtcHR5U2l6ZSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IHNpemU7IC0tY291bnQgPj0gbWluQ291bnQ7IGJsb2NrU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5kYXRhW3RoaXMucG9zKytdKSkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChzaXplICE9PSBlbXB0eVNpemUpO1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmc7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3NCaW4oKSB7XG4gICAgICAgIGxldCBzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zXSwgbGVuID0gMDtcbiAgICAgICAgY29uc3QgZW1wdHlTaXplID0gMCwgaW5jcmVtZW50ID0gMTtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgc2l6ZSAhPT0gZW1wdHlTaXplOyBvZmZzZXQgKz0gc2l6ZSArIGluY3JlbWVudCwgc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcyArIG9mZnNldF0pIHtcbiAgICAgICAgICAgIGxlbiArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBzaXplICE9PSBlbXB0eVNpemU7IHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gc2l6ZTsgLS1jb3VudCA+PSBlbXB0eVNpemU7IGJsb2NrRGF0YVtpKytdID0gdGhpcy5kYXRhW3RoaXMucG9zKytdKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsb2NrRGF0YTtcbiAgICB9XG4gICAgc2tpcFN1YkJsb2NrcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbmNyZW1lbnQgPSAxLCBub0RhdGEgPSAwOyB0aGlzLmRhdGFbdGhpcy5wb3NdICE9PSBub0RhdGE7IHRoaXMucG9zICs9IHRoaXMuZGF0YVt0aGlzLnBvc10gKyBpbmNyZW1lbnQpIHtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcysrO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js\n"));

/***/ }),

/***/ "./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterlaceOffsets: function() { return /* binding */ InterlaceOffsets; },\n/* harmony export */   InterlaceSteps: function() { return /* binding */ InterlaceSteps; }\n/* harmony export */ });\nconst InterlaceOffsets = [0, 4, 2, 1];\nconst InterlaceSteps = [8, 8, 4, 2];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRzcGFydGljbGVzL3NoYXBlLWltYWdlL2Jyb3dzZXIvR2lmVXRpbHMvQ29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHRzcGFydGljbGVzL3NoYXBlLWltYWdlL2Jyb3dzZXIvR2lmVXRpbHMvQ29uc3RhbnRzLmpzPzllMGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEludGVybGFjZU9mZnNldHMgPSBbMCwgNCwgMiwgMV07XG5leHBvcnQgY29uc3QgSW50ZXJsYWNlU3RlcHMgPSBbOCwgOCwgNCwgMl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js\n"));

/***/ }),

/***/ "./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeGIF: function() { return /* binding */ decodeGIF; },\n/* harmony export */   drawGif: function() { return /* binding */ drawGif; },\n/* harmony export */   getGIFLoopAmount: function() { return /* binding */ getGIFLoopAmount; },\n/* harmony export */   loadGifImage: function() { return /* binding */ loadGifImage; }\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.js */ \"./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js\");\n/* harmony import */ var _ByteStream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ByteStream.js */ \"./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js\");\n\n\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (_Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] * frame.width +\n                                _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (_Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new _ByteStream_js__WEBPACK_IMPORTED_MODULE_1__.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nfunction drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case 1:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case 2:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case 3:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        const { loadImage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../Utils.js */ \"./node_modules/@tsparticles/shape-image/browser/Utils.js\"));\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js\n"));

/***/ }),

/***/ "./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: function() { return /* binding */ ImageDrawer; }\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"./node_modules/@tsparticles/engine/browser/index.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"./node_modules/@tsparticles/shape-image/browser/Utils.js\");\n/* harmony import */ var _GifUtils_Utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GifUtils/Utils.js */ \"./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js\");\n\n\n\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nclass ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            (0,_GifUtils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.drawGif)(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            void this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        void (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceImageColor)(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height\n                        ? imageData.width / imageData.height\n                        : image.ratio ?? defaultRatio,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.shapeFill = imageShape.fill;\n            particle.shapeClose = imageShape.close;\n        })();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRzcGFydGljbGVzL3NoYXBlLWltYWdlL2Jyb3dzZXIvSW1hZ2VEcmF3ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRDtBQUNIO0FBQ0Q7QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw0REFBVyxFQUFFO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQ0FBcUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkRBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw0REFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHRzcGFydGljbGVzL3NoYXBlLWltYWdlL2Jyb3dzZXIvSW1hZ2VEcmF3ZXIuanM/YWJkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvclByZWZpeCB9IGZyb20gXCJAdHNwYXJ0aWNsZXMvZW5naW5lXCI7XG5pbXBvcnQgeyByZXBsYWNlSW1hZ2VDb2xvciB9IGZyb20gXCIuL1V0aWxzLmpzXCI7XG5pbXBvcnQgeyBkcmF3R2lmIH0gZnJvbSBcIi4vR2lmVXRpbHMvVXRpbHMuanNcIjtcbmNvbnN0IGRvdWJsZSA9IDIsIGRlZmF1bHRBbHBoYSA9IDEsIHNpZGVzID0gMTIsIGRlZmF1bHRSYXRpbyA9IDE7XG5leHBvcnQgY2xhc3MgSW1hZ2VEcmF3ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSkge1xuICAgICAgICB0aGlzLmxvYWRJbWFnZVNoYXBlID0gYXN5bmMgKGltYWdlU2hhcGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZW5naW5lLmxvYWRJbWFnZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvclByZWZpeH0gaW1hZ2Ugc2hhcGUgbm90IGluaXRpYWxpemVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9lbmdpbmUubG9hZEltYWdlKHtcbiAgICAgICAgICAgICAgICBnaWY6IGltYWdlU2hhcGUuZ2lmLFxuICAgICAgICAgICAgICAgIG5hbWU6IGltYWdlU2hhcGUubmFtZSxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IGltYWdlU2hhcGUucmVwbGFjZUNvbG9yID8/IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNyYzogaW1hZ2VTaGFwZS5zcmMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgIH1cbiAgICBhZGRJbWFnZShpbWFnZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2VuZ2luZS5pbWFnZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuZ2luZS5pbWFnZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbmdpbmUuaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgIH1cbiAgICBkcmF3KGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZXh0LCByYWRpdXMsIHBhcnRpY2xlLCBvcGFjaXR5IH0gPSBkYXRhLCBpbWFnZSA9IHBhcnRpY2xlLmltYWdlLCBlbGVtZW50ID0gaW1hZ2U/LmVsZW1lbnQ7XG4gICAgICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgICAgaWYgKGltYWdlLmdpZiAmJiBpbWFnZS5naWZEYXRhKSB7XG4gICAgICAgICAgICBkcmF3R2lmKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gaW1hZ2UucmF0aW8sIHBvcyA9IHtcbiAgICAgICAgICAgICAgICB4OiAtcmFkaXVzLFxuICAgICAgICAgICAgICAgIHk6IC1yYWRpdXMsXG4gICAgICAgICAgICB9LCBkaWFtZXRlciA9IHJhZGl1cyAqIGRvdWJsZTtcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGVsZW1lbnQsIHBvcy54LCBwb3MueSwgZGlhbWV0ZXIsIGRpYW1ldGVyIC8gcmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBkZWZhdWx0QWxwaGE7XG4gICAgfVxuICAgIGdldFNpZGVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiBzaWRlcztcbiAgICB9XG4gICAgYXN5bmMgaW5pdChjb250YWluZXIpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbnRhaW5lci5hY3R1YWxPcHRpb25zO1xuICAgICAgICBpZiAoIW9wdGlvbnMucHJlbG9hZCB8fCAhdGhpcy5fZW5naW5lLmxvYWRJbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaW1hZ2VEYXRhIG9mIG9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW5naW5lLmxvYWRJbWFnZShpbWFnZURhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxvYWRTaGFwZShwYXJ0aWNsZSkge1xuICAgICAgICBpZiAocGFydGljbGUuc2hhcGUgIT09IFwiaW1hZ2VcIiAmJiBwYXJ0aWNsZS5zaGFwZSAhPT0gXCJpbWFnZXNcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW5naW5lLmltYWdlcykge1xuICAgICAgICAgICAgdGhpcy5fZW5naW5lLmltYWdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IHBhcnRpY2xlLnNoYXBlRGF0YTtcbiAgICAgICAgaWYgKCFpbWFnZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuX2VuZ2luZS5pbWFnZXMuZmluZCgodCkgPT4gdC5uYW1lID09PSBpbWFnZURhdGEubmFtZSB8fCB0LnNvdXJjZSA9PT0gaW1hZ2VEYXRhLnNyYyk7XG4gICAgICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgICAgIHZvaWQgdGhpcy5sb2FkSW1hZ2VTaGFwZShpbWFnZURhdGEpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZFNoYXBlKHBhcnRpY2xlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnRpY2xlSW5pdChjb250YWluZXIsIHBhcnRpY2xlKSB7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zaGFwZSAhPT0gXCJpbWFnZVwiICYmIHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUuaW1hZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUuaW1hZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VzID0gdGhpcy5fZW5naW5lLmltYWdlcywgaW1hZ2VEYXRhID0gcGFydGljbGUuc2hhcGVEYXRhO1xuICAgICAgICBpZiAoIWltYWdlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yID0gcGFydGljbGUuZ2V0RmlsbENvbG9yKCksIGltYWdlID0gaW1hZ2VzLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gaW1hZ2VEYXRhLm5hbWUgfHwgdC5zb3VyY2UgPT09IGltYWdlRGF0YS5zcmMpO1xuICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVwbGFjZUNvbG9yID0gaW1hZ2VEYXRhLnJlcGxhY2VDb2xvciA/PyBpbWFnZS5yZXBsYWNlQ29sb3I7XG4gICAgICAgIGlmIChpbWFnZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpY2xlSW5pdChjb250YWluZXIsIHBhcnRpY2xlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZvaWQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxldCBpbWFnZVJlcztcbiAgICAgICAgICAgIGlmIChpbWFnZS5zdmdEYXRhICYmIGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VSZXMgPSBhd2FpdCByZXBsYWNlSW1hZ2VDb2xvcihpbWFnZSwgaW1hZ2VEYXRhLCBjb2xvciwgcGFydGljbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VSZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBpbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogaW1hZ2UuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZ2lmOiBpbWFnZS5naWYsXG4gICAgICAgICAgICAgICAgICAgIGdpZkRhdGE6IGltYWdlLmdpZkRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGdpZkxvb3BDb3VudDogaW1hZ2UuZ2lmTG9vcENvdW50LFxuICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJhdGlvOiBpbWFnZURhdGEud2lkdGggJiYgaW1hZ2VEYXRhLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpbWFnZURhdGEud2lkdGggLyBpbWFnZURhdGEuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IGltYWdlLnJhdGlvID8/IGRlZmF1bHRSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNvbG9yOiByZXBsYWNlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbWFnZVJlcy5yYXRpbykge1xuICAgICAgICAgICAgICAgIGltYWdlUmVzLnJhdGlvID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpbGwgPSBpbWFnZURhdGEuZmlsbCA/PyBwYXJ0aWNsZS5zaGFwZUZpbGwsIGNsb3NlID0gaW1hZ2VEYXRhLmNsb3NlID8/IHBhcnRpY2xlLnNoYXBlQ2xvc2UsIGltYWdlU2hhcGUgPSB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlUmVzLFxuICAgICAgICAgICAgICAgIGZpbGwsXG4gICAgICAgICAgICAgICAgY2xvc2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFydGljbGUuaW1hZ2UgPSBpbWFnZVNoYXBlLmltYWdlO1xuICAgICAgICAgICAgcGFydGljbGUuc2hhcGVGaWxsID0gaW1hZ2VTaGFwZS5maWxsO1xuICAgICAgICAgICAgcGFydGljbGUuc2hhcGVDbG9zZSA9IGltYWdlU2hhcGUuY2xvc2U7XG4gICAgICAgIH0pKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js\n"));

/***/ })

}]);